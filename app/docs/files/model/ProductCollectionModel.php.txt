<?php
namespace ktc\a2\model;

use ktc\a2\Exception\StoreException;


/**
 * Class ProductCollectionModel
 * @package ktc\a2\model
 */
class ProductCollectionModel extends Model
{
    /**
     * @var array Contains product IDs for lookup in ProductCollectionModel::getProducts
     */
    private $prodIds;
    /**
     * @var int The number of indices in $prodIds
     */
    private $N;

    /**
     * ProductCollectionModel constructor
     *
     * Creates a ProductCollectionModel, which is used to create a generator for ProductModels
     *
     * @throws StoreException on database connection errors or lack of products in the Product table
     */
    public function __construct()
    {
        parent::__construct();
        if (!$result = $this->db->query("SELECT `prod_id` FROM `product`;")) {
            throw new StoreException(99, 'DB query failed: ' . mysqli_error($this->db));
        }
        if ($result->num_rows < 1) {
            throw new StoreException(99, 'Product table is empty');
        }
        $this->prodIds = array_column($result->fetch_all(), 0);
        $this->N = $result->num_rows;
    }

    /**
     * Get products
     *
     * A generator function yielding one ProductModel per ID in $prodIds
     *
     * @return \Generator|ProductModel[] Products
     * @throws StoreException via ProductModel->load
     * @uses \ktc\a2\model\SearchCollectionModel::$prodIds to create ProductModels
     */
    public function getProducts()
    {
        foreach ($this->prodIds as $id) {
            // Use a generator to save on memory/resources
            // load accounts from DB one at a time only when required
            yield (new ProductModel())->load($id);
        }
    }
}

